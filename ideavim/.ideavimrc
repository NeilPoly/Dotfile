" Keymaps summary

" <C-h> go to left window
" <C-l> go to right window
" <S-h> prev buffer
" <S-l> next buffer
" <A-j> move statement down
" <A-k> move statement up

" <leader>cf format code
" <leader>w- split window below
" <leader>w| split window right
" <leader>wu unsplit window

" gd go to declaration

set scrolloff=5
set incsearch
map Q gq
set smartcase
set smartindent
set number relativenumber
set clipboard+=unnamed


" Highlight copied text
" Plug 'machakann/vim-highlightedyank'
" Commentary plugin
" Plug 'tpope/vim-commentary'


" ideavim plugins "
""| Key     |  Description                                            |  Map Setting                   |
""|---------|---------------------------------------------------------|--------------------------------|
""| `o`     |  Open files, directories and bookmarks                  | `g:NERDTreeMapActivateNode`    |
""| `go`    |  Open selected file, but leave cursor in the NERDTree   | `g:NERDTreeMapPreview`         |
""| `t`     |  Open selected node/bookmark in a new tab               | `g:NERDTreeMapOpenInTab`       |
""| `T`     |  Same as 't' but keep the focus on the current tab      | `g:NERDTreeMapOpenInTabSilent` |
""| `i`     |  Open selected file in a split window                   | `g:NERDTreeMapOpenSplit`       |
""| `gi`    |  Same as i, but leave the cursor on the NERDTree        | `g:NERDTreeMapPreviewSplit`    |
""| `s`     |  Open selected file in a new vsplit                     | `g:NERDTreeMapOpenVSplit`      |
""| `gs`    |  Same as s, but leave the cursor on the NERDTree        | `g:NERDTreeMapPreviewVSplit`   |
""| `O`     |  Recursively open the selected directory                | `g:NERDTreeMapOpenRecursively` |
""| `x`     |  Close the current nodes parent                         | `g:NERDTreeMapCloseDir`        |
""| `X`     |  Recursively close all children of the current node     | `g:NERDTreeMapCloseChildren`   |
""| `P`     |  Jump to the root node                                  | `g:NERDTreeMapJumpRoot`        |
""| `p`     |  Jump to current nodes parent                           | `g:NERDTreeMapJumpParent`      |
""| `K`     |  Jump up inside directories at the current tree depth   | `g:NERDTreeMapJumpFirstChild`  |
""| `J`     |  Jump down inside directories at the current tree depth | `g:NERDTreeMapJumpLastChild`   |
""| `<C-J>` |  Jump down to next sibling of the current directory     | `g:NERDTreeMapJumpNextSibling` |
""| `<C-K>` |  Jump up to previous sibling of the current directory   | `g:NERDTreeMapJumpPrevSibling` |
""| `r`     |  Recursively refresh the current directory              | `g:NERDTreeMapRefresh`         |
""| `R`     |  Recursively refresh the current root                   | `g:NERDTreeMapRefreshRoot`     |
""| `m`     |  Display the NERDTree menu                              | `g:NERDTreeMapMenu`            |
""| `q`     |  Close the NERDTree window                              | `g:NERDTreeMapQuit`            |
""| `A`     |  Zoom (maximize/minimize) the NERDTree window           | `g:NERDTreeMapToggleZoom`      |
Plug 'preservim/nerdtree'

" ======================== "
" ==  No Leader Keymaps == "
" ======================== "
" nmap gm <action>(MethodUp) -> use idea keymap: <Alt+‚Üì>
" Move to next tab "
nmap L <action>(NextTab)
" Move to previous tab "
nmap H <action>(PreviousTab)
" Move cursor to right windows "
nmap <c-l> <c-w>l
" Move cursor to left windows "
nmap <c-h> <c-w>h
" Move statement
nmap <a-j> <action>(MoveStatementDown)
nmap <a-k> <action>(MoveStatementUp)
" Go to define
nmap gd <action>(GotoDeclaration)
" Move tab
nmap <leader>wl <action>(MoveEditorToOppositeTabGroup)

" ======================== "
" ==== Leader keymaps ==== "
" ======================== "
let mapleader=" "
" üëªWhich-Key
set which-key
set notimeout

" ‚≠êÔ∏è File Explorer "
let g:WhichKeyDesc_ToggleExplorerOrExtract = "<leader>e ToggleExplorer"
nmap <leader>e :NERDTreeToggle<CR>

" üìÑCode "
let g:WhichKeyDesc_Code = "<leader>c Code"
let g:WhichKeyDesc_Code_Format = "<leader>cf Format"
nmap <leader>cf <action>(ReformatCode)


" üìÑFile "
let g:WhichKeyDesc_File = "<leader>f File"
" Find File "
" let g:WhichKeyDesc_File_FindFile = "<leader>ff FindFile"
" nmap <leader>ff <action>(GotoFile)
" Find File Location "
let g:WhichKeyDesc_File_FindFileLocation = "<leader>fl FindFileLocation"
nmap <leader>fl <action>(SelectInProjectView)
" Format File "
let g:WhichKeyDesc_File_Format = "<leader>fm Format"
nmap <leader>fm <action>(ReformatCode) \| <action>(OptimizeImports)
" Show Structure Popup "
" let g:WhichKeyDesc_File_FileStructure = "<leader>fs ShowFileStructure"
" nmap <leader>fs <action>(FileStructurePopup)

" ü™üWindows "
let g:WhichKeyDesc_Windows = "<leader>w Windows"
" Close window "
let g:WhichKeyDesc_Windows_CloseActiveWindow = "<leader>wc CloseActiveWindow"
nmap <leader>wc <c-w>c
" Split window right "
let g:WhichKeyDesc_Windows_SplitWindowRight = "<leader>w\| SplitWindowRight"
nmap <leader>w\| <action>(MoveTabRight)
" Split window down "
let g:WhichKeyDesc_Windows_SplitWindowDown = "<leader>w- SplitWindowDown"
nmap <leader>w- <action>(MoveTabDown)
" Split window undo "
let g:WhichKeyDesc_Windows_UnSplitWindow = "<leader>wu UnSplitWindow"
nmap <leader>wu <action>(Unsplit)


" Easy-Motion
set easymotion
nmap s <Plug>(easymotion-bd-f2)
